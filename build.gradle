plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = '0.1.0'
version = '1.19.2-0.1.0'
group = 'net.apucsw.modular_electronics'
archivesBaseName = 'modular_electronics'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.19.2'

    runs {
        client {
            workingDirectory project.file('run')
			
            property 'forge.logging.markers', 'REGISTRIES'
			
            property 'forge.logging.console.level', 'debug'
			
            property 'forge.enabledGameTestNamespaces', 'modular_electronics'

            mods {
                modular_electronics {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'modular_electronics'

            mods {
                modular_electronics {
                    source sourceSets.main
                }
            }
        }
		
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'modular_electronics'

            mods {
                modular_electronics {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
			
            mods {
                modular_electronics {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url 'https://squiddev.cc/maven/'
        content {
            includeGroup 'org.squiddev'
        }
    }
	maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven { url 'https://cursemaven.com/' }
	maven {
        url = 'https://sizableshrimp.me/maven'
    }
}

dependencies {
	// Forge Version
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.3'

    // JEI API
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
	// JEI Runtime Dependencies
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
	
	// Mekanism API
	compileOnly "mekanism:Mekanism:${mekanism_version}:api"
    
    // Mekanism Runtime Dependencies
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")// Mekanism: Tools
	
	// Mekanism Compile Dependencies
	compileOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
    compileOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
	compileOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
	
	// ComputerCraft: Tweaked supports
    compileOnly fg.deobf("org.squiddev:cc-tweaked-${mc_version}:${cct_version}:api")
    runtimeOnly fg.deobf("org.squiddev:cc-tweaked-${mc_version}:${cct_version}")
	
	// Curious API supports
	runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curious_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curious_version}:api")
	
	// Entity Model JSON
	implementation fg.deobf("me.sizableshrimp:entitymodeljson:${mc_version}-${entitymodeljson_version}")
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "Modular Electronics",
                "Specification-Vendor"    : "APUC SW",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "APUC SW",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/modular_electronics"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
